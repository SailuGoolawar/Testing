import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { useFlags } from 'launchdarkly-react-client-sdk';
import { useNavigate, useLocation } from 'react-router-dom';
import { useAccount } from 'src/common/contexts/AccountContext';
import { useHeader } from 'src/common/contexts/HeaderContext';
import useFetchWindBarAndAccordionData from 'src/hooks/useFetchWindBarChartData';
import useFetchEarthMovementBarAndAccordionData from 'src/hooks/useFetchEarthMovementBarData';
import { useFetchFloodBarAndAccordionData } from 'src/hooks/useFetchFloodBarData';
import NatHazOverview from './NatHazOverview';

// Mock dependencies
jest.mock('launchdarkly-react-client-sdk');
jest.mock('react-router-dom', () => ({
  useNavigate: jest.fn(),
  useLocation: jest.fn(),
}));
jest.mock('src/common/contexts/AccountContext');
jest.mock('src/common/contexts/HeaderContext');
jest.mock('src/hooks/useFetchWindBarChartData');
jest.mock('src/hooks/useFetchEarthMovementBarData');
jest.mock('src/hooks/useFetchFloodBarData');

describe('NatHazOverview', () => {
  const mockNavigate = jest.fn();
  const mockUseFlags = useFlags as jest.Mock;
  const mockUseNavigate = useNavigate as jest.Mock;
  const mockUseLocation = useLocation as jest.Mock;
  const mockUseAccount = useAccount as jest.Mock;
  const mockUseHeader = useHeader as jest.Mock;
  const mockUseFetchWindBarAndAccordionData = useFetchWindBarAndAccordionData as jest.Mock;
  const mockUseFetchEarthMovementBarAndAccordionData = useFetchEarthMovementBarAndAccordionData as jest.Mock;
  const mockUseFetchFloodBarAndAccordionData = useFetchFloodBarAndAccordionData as jest.Mock;

  beforeEach(() => {
    mockUseNavigate.mockReturnValue(mockNavigate);
    mockUseLocation.mockReturnValue({ pathname: '/test-path' });
    mockUseAccount.mockReturnValue({ accountDetails: { orgid: 'test-org-id' } });
    mockUseHeader.mockReturnValue({
      activeTab: 0,
      setActiveTab: jest.fn(),
      includeProspect: true,
      setIncludeProspect: jest.fn(),
      asofDate: '2021-01-01',
    });
    mockUseFetchWindBarAndAccordionData.mockReturnValue({
      WindAttributes: {},
      loading: false,
      errorCode: null,
      refetch: jest.fn(),
    });
    mockUseFetchEarthMovementBarAndAccordionData.mockReturnValue({
      EarthMovementAttributes: {},
      loading: false,
      errorCode: null,
      refetch: jest.fn(),
    });
    mockUseFetchFloodBarAndAccordionData.mockReturnValue({
      FloodAttributes: {},
      loading: false,
      errorCode: null,
      refetch: jest.fn(),
    });
    mockUseFlags.mockReturnValue({
      NATURAL_HAZARDS_EARTHQUAKE_ENABLED: true,
      NATURAL_HAZARDS_FLOOD_ENABLED: true,
      NATURAL_HAZARDS_WIND_ENABLED: true,
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should render the NatHazOverview component', () => {
    render(<NatHazOverview />);
    expect(screen.getByTestId('overview')).toBeInTheDocument();
  });

  it('should call the refetch functions on mount', () => {
    const earthMovementRefetch = jest.fn();
    const windRefetch = jest.fn();
    const floodRefetch = jest.fn();

    mockUseFetchEarthMovementBarAndAccordionData.mockReturnValueOnce({
      EarthMovementAttributes: {},
      loading: false,
      errorCode: null,
      refetch: earthMovementRefetch,
    });
    mockUseFetchWindBarAndAccordionData.mockReturnValueOnce({
      WindAttributes: {},
      loading: false,
      errorCode: null,
      refetch: windRefetch,
    });
    mockUseFetchFloodBarAndAccordionData.mockReturnValueOnce({
      FloodAttributes: {},
      loading: false,
      errorCode: null,
      refetch: floodRefetch,
    });

    render(<NatHazOverview />);

    expect(earthMovementRefetch).toHaveBeenCalled();
    expect(windRefetch).toHaveBeenCalled();
    expect(floodRefetch).toHaveBeenCalled();
  });

  it('should navigate to the correct URL when a peril title is clicked', () => {
    render(<NatHazOverview />);

    const floodTitle = screen.getByText('Flood');
    fireEvent.click(floodTitle);

    expect(mockNavigate).toHaveBeenCalledWith(
      expect.stringContaining(NatHazModuleUrlRouteEnum.FLOODURL)
    );

    const windTitle = screen.getByText('Wind');
    fireEvent.click(windTitle);

    expect(mockNavigate).toHaveBeenCalledWith(
      expect.stringContaining(NatHazModuleUrlRouteEnum.WINDURL)
    );

    const earthMovementTitle = screen.getByText('Earth Movement');
    fireEvent.click(earthMovementTitle);

    expect(mockNavigate).toHaveBeenCalledWith(
      expect.stringContaining(NatHazModuleUrlRouteEnum.EARTHURL)
    );
  });
});
